{"name":"Twee.IO Framework","tagline":"Node.js & io.js modular framework with extensions, middleware and modules support","body":"## Start your first project using Twee.IO!\r\n\r\n```\r\nsudo npm install -g twee    # Twee.IO installation\r\ntwee && cd application      # new application generation\r\nnpm install                 # dependencies installation\r\nnpm run-script assets       # running bower and compiling styles and scripts\r\nnpm start                   # starting on http://127.0.0.1:3000/\r\n```\r\n\r\n### Quick Facts About Twee.IO\r\n- Modular structure with folders namespaces\r\n- Extensions support with ultra flexible dependencies flow\r\n- Config driven with environments support\r\n- Extra scalable with stable Express.js Kernel under the hood\r\n- Socket.IO Support\r\n- Maximum automatisation\r\n\r\n### Modular Structure\r\nTwee.IO gives you new powerful modules concept. It's new modules system that has been developed with intention to be simple, flexible and with ability for code re-usage. Module contains completely everything needed: code, including MVC; libraries code; views; images; javascript; CSS; extensions; params; models. In other words module - is namespaced folder. Also you can define module as functionality that is grouped and available for reusing in complex big applications.\r\n\r\n![Modules Structure](http://twee.io/assets/img/screens/Modules.png)\r\n\r\n### Middleware Compatible\r\nAny middleware which was ever written for Express.js or Connect - is also fully compatible with Twee.IO. You can even specify deepness of complex objects to use sub-object as middleware function in your application or module. Middleware using in Twee.IO is as simple as using it in Express.js. But also you can specify order of middleware and this process is ultra-flexible. This all you can do just changing configuration files. There are few middleware types in Twee.IO: module-level, extension-level, controller-level (pre-action and post-action). This all has been implemented for you to be sure that all the middleware functions works in needed time and needed place, - i.e. to make your application maximum predictable.\r\n\r\n![Middleware Functions](http://twee.io/assets/img/screens/MiddlewareFunctions.png)\r\n\r\n### Modern Framework\r\nModern means that you can use all the necessary benefits of today's frameworks: routing, compression, MVC pattern, excellent configuration possibilities, transparent structure of the kernel, kernel events to extend framework, XSS protection, object-oriented code, best practices and patterns during building application structure, using Grunt, automation, sockets support, databases, ACL, excellent documentation with big amount of examples. \r\nAlso you can use any existing NPM module to be scalable and flexible.\r\n\r\n### Extensions Support\r\nExtensions are special code blocks, standalone NPM modules which can have it's own configuration and can depend of another extensions, and with interacting with Twee.IO API can inject additional functionality in framework's core, use functionality of another extensions and application modules and change application environment totally. Now you don't need to keep in mind the order of including functionality in code\r\n\r\n![Extensions Support](http://twee.io/assets/img/screens/extensions.png)\r\n\r\n### Template Engine Freedom\r\nViews Engine - is the most common and powerful tool in modern web-development. Like a Swiss knife. We don't need to force you to use any specific view engine. Just turn ON one of many existing view engines and start developing!\r\nHere's full list of view engines which are supported by consolidate package: atpl, doT.js, dust, eco, ect, ejs, haml, haml-coffee, handlebars, hogan, jade, jazz, jqtpl, JUST, liquor, lodash, mote, mustache, nunjucks, QEJS, ractive, swig, templayed, toffee, underscore, walrus, whiskers\r\n\r\n### Work Everywhere\r\nYou can run Twee.IO application on any server with any operation system which supports Express.js applications running. Framework is very fast and don't require too much resources. And this with it's flexibility and thought architecture makes it excellent choice for every engineer. It is simple to run Twee.IO. Install it, compile scripts and styles and run. For detailed information read documentation. Twee.IO uses Grunt for working with assets, it's compiling and concatenation. Also it supports SSL-certificates, not only for HTTPS, but also for secured sockets. There is possibility to make so many forks of process as needed, but not more than CPUs number.\r\n\r\n![Work Everywhere](http://twee.io/assets/img/screens/RunEverywhere.png)\r\n\r\n>\"Good design adds value faster than it adds cost.\"\r\n> Thomas C. Gale\r\n\r\n### What is Twee.IO?\r\nTwee.IO has been developed with love to Express.js. It's mission is to help professionals to write big scalable and stable applications in real production environment having at the same time great opportunities for support. It is actually a scalable and extensible layer with stable core which uses best and greater-tested npm modules for reaching the business goals. The fact that Twee.IO based on Express.js.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}